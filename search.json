[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 etdev authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugo Gruson. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gruson H (2023). etdev: Internal Epiverse-TRACE Development Package. R package version 0.0.0.9000.","code":"@Manual{,   title = {etdev: Internal Epiverse-TRACE Development Package},   author = {Hugo Gruson},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"etdev","dir":"","previous_headings":"","what":"Internal Epiverse-TRACE Development Package","title":"Internal Epiverse-TRACE Development Package","text":"internal package provides tools Epiverse-TRACE developers. Eventually, functions upstreamed relevant packages used global community.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Internal Epiverse-TRACE Development Package","text":"can install development version package GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"epiverse-trace/etdev\")"},{"path":"/reference/extract_min_r_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract declared minimum R version from DESCRIPTION — extract_min_r_version","title":"Extract declared minimum R version from DESCRIPTION — extract_min_r_version","text":"Extract declared minimum R version DESCRIPTION","code":""},{"path":"/reference/extract_min_r_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract declared minimum R version from DESCRIPTION — extract_min_r_version","text":"","code":"extract_min_r_version(path = \".\")"},{"path":"/reference/extract_min_r_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract declared minimum R version from DESCRIPTION — extract_min_r_version","text":"path Path package root","code":""},{"path":"/reference/extract_min_r_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract declared minimum R version from DESCRIPTION — extract_min_r_version","text":"R version number character(0) minimum R version declared","code":""},{"path":"/reference/insert-badges.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert badges in README — insert_badge_rcmdcheck","title":"Insert badges in README — insert_badge_rcmdcheck","text":"Insert badges README","code":""},{"path":"/reference/insert-badges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert badges in README — insert_badge_rcmdcheck","text":"","code":"insert_badge_rcmdcheck(path = \".\")  insert_badge_codecov(path = \".\")"},{"path":"/reference/insert-badges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert badges in README — insert_badge_rcmdcheck","text":"path Path package root","code":""},{"path":"/reference/na_null_strings_linter.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure that comparisons to NA or NULL are not made as strings — na_null_strings_linter","title":"Ensure that comparisons to NA or NULL are not made as strings — na_null_strings_linter","text":"attempt \"fix\" fact comparison NA NULL return TRUE/FALSE, users sometimes convert character. incorrect produce unexpected results.","code":""},{"path":"/reference/na_null_strings_linter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure that comparisons to NA or NULL are not made as strings — na_null_strings_linter","text":"","code":"na_null_strings_linter()"},{"path":"/reference/na_null_strings_linter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure that comparisons to NA or NULL are not made as strings — na_null_strings_linter","text":"linter proposed integration lintr package (issue #2130) rejected due high possible false positives, case users actually want compare \"NA\" \"NULL\" strings. can case working database generally character values parsed NA NULL R.","code":""},{"path":"/reference/na_null_strings_linter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure that comparisons to NA or NULL are not made as strings — na_null_strings_linter","text":"","code":"lintr::lint(   text = \"x == 'NA'\",   linters = etdev::na_null_strings_linter() ) #> ::warning file=<text>,line=1,col=1::file=<text>,line=1,col=1,[na_null_strings_linter] Are you sure you want to compare to *the string* 'NA' or 'NULL'? To compare to the special values NA or NULL, please use `is.null()` or `is.na()` instead.  lintr::lint(   text = \"x != 'NA'\",   linters = etdev::na_null_strings_linter() ) #> ::warning file=<text>,line=1,col=1::file=<text>,line=1,col=1,[na_null_strings_linter] Are you sure you want to compare to *the string* 'NA' or 'NULL'? To compare to the special values NA or NULL, please use `is.null()` or `is.na()` instead.  lintr::lint(   text = \"x %in% 'NA'\",   linters = etdev::na_null_strings_linter() ) #> ::warning file=<text>,line=1,col=1::file=<text>,line=1,col=1,[na_null_strings_linter] Are you sure you want to compare to *the string* 'NA' or 'NULL'? To compare to the special values NA or NULL, please use `is.null()` or `is.na()` instead.  lintr::lint(   text = \"'NA' %in% x\",   linters = etdev::na_null_strings_linter() )  lintr::lint(   text = \"x == 'NULL'\",   linters = etdev::na_null_strings_linter() ) #> ::warning file=<text>,line=1,col=1::file=<text>,line=1,col=1,[na_null_strings_linter] Are you sure you want to compare to *the string* 'NA' or 'NULL'? To compare to the special values NA or NULL, please use `is.null()` or `is.na()` instead.  lintr::lint(   text = \"x %in% 'NULL'\",   linters = etdev::na_null_strings_linter() ) #> ::warning file=<text>,line=1,col=1::file=<text>,line=1,col=1,[na_null_strings_linter] Are you sure you want to compare to *the string* 'NA' or 'NULL'? To compare to the special values NA or NULL, please use `is.null()` or `is.na()` instead.  # Pass lintr::lint(   text = 'x == \"a\"',   linters = etdev::na_null_strings_linter() )"}]
